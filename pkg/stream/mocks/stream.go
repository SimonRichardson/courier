// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/trussle/courier/pkg/stream (interfaces: Stream)

package mocks

import (
	queue "github.com/trussle/courier/pkg/queue"
	stream "github.com/trussle/courier/pkg/stream"
	gomock "github.com/golang/mock/gomock"
)

// MockStream is a mock of Stream interface
type MockStream struct {
	ctrl     *gomock.Controller
	recorder *MockStreamMockRecorder
}

// MockStreamMockRecorder is the mock recorder for MockStream
type MockStreamMockRecorder struct {
	mock *MockStream
}

// NewMockStream creates a new mock instance
func NewMockStream(ctrl *gomock.Controller) *MockStream {
	mock := &MockStream{ctrl: ctrl}
	mock.recorder = &MockStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockStream) EXPECT() *MockStreamMockRecorder {
	return _m.recorder
}

// Append mocks base method
func (_m *MockStream) Append(_param0 queue.Segment) error {
	ret := _m.ctrl.Call(_m, "Append", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Append indicates an expected call of Append
func (_mr *MockStreamMockRecorder) Append(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Append", arg0)
}

// Capacity mocks base method
func (_m *MockStream) Capacity() bool {
	ret := _m.ctrl.Call(_m, "Capacity")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Capacity indicates an expected call of Capacity
func (_mr *MockStreamMockRecorder) Capacity() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Capacity")
}

// Commit mocks base method
func (_m *MockStream) Commit(_param0 *stream.Transaction) error {
	ret := _m.ctrl.Call(_m, "Commit", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (_mr *MockStreamMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Commit", arg0)
}

// Failed mocks base method
func (_m *MockStream) Failed(_param0 *stream.Transaction) error {
	ret := _m.ctrl.Call(_m, "Failed", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Failed indicates an expected call of Failed
func (_mr *MockStreamMockRecorder) Failed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Failed", arg0)
}

// Len mocks base method
func (_m *MockStream) Len() int {
	ret := _m.ctrl.Call(_m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len
func (_mr *MockStreamMockRecorder) Len() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Len")
}

// Reset mocks base method
func (_m *MockStream) Reset() error {
	ret := _m.ctrl.Call(_m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset
func (_mr *MockStreamMockRecorder) Reset() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reset")
}

// Walk mocks base method
func (_m *MockStream) Walk(_param0 func(queue.Segment) error) error {
	ret := _m.ctrl.Call(_m, "Walk", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Walk indicates an expected call of Walk
func (_mr *MockStreamMockRecorder) Walk(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Walk", arg0)
}
