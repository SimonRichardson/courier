// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/trussle/courier/pkg/stream (interfaces: Stream)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	queue "github.com/trussle/courier/pkg/queue"
	stream "github.com/trussle/courier/pkg/stream"
	reflect "reflect"
)

// MockStream is a mock of Stream interface
type MockStream struct {
	ctrl     *gomock.Controller
	recorder *MockStreamMockRecorder
}

// MockStreamMockRecorder is the mock recorder for MockStream
type MockStreamMockRecorder struct {
	mock *MockStream
}

// NewMockStream creates a new mock instance
func NewMockStream(ctrl *gomock.Controller) *MockStream {
	mock := &MockStream{ctrl: ctrl}
	mock.recorder = &MockStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStream) EXPECT() *MockStreamMockRecorder {
	return m.recorder
}

// Append mocks base method
func (m *MockStream) Append(arg0 queue.Segment) error {
	ret := m.ctrl.Call(m, "Append", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Append indicates an expected call of Append
func (mr *MockStreamMockRecorder) Append(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockStream)(nil).Append), arg0)
}

// Capacity mocks base method
func (m *MockStream) Capacity() bool {
	ret := m.ctrl.Call(m, "Capacity")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Capacity indicates an expected call of Capacity
func (mr *MockStreamMockRecorder) Capacity() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Capacity", reflect.TypeOf((*MockStream)(nil).Capacity))
}

// Commit mocks base method
func (m *MockStream) Commit(arg0 *stream.Transaction) error {
	ret := m.ctrl.Call(m, "Commit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockStreamMockRecorder) Commit(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockStream)(nil).Commit), arg0)
}

// Failed mocks base method
func (m *MockStream) Failed(arg0 *stream.Transaction) error {
	ret := m.ctrl.Call(m, "Failed", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Failed indicates an expected call of Failed
func (mr *MockStreamMockRecorder) Failed(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Failed", reflect.TypeOf((*MockStream)(nil).Failed), arg0)
}

// Len mocks base method
func (m *MockStream) Len() int {
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len
func (mr *MockStreamMockRecorder) Len() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockStream)(nil).Len))
}

// Reset mocks base method
func (m *MockStream) Reset() error {
	ret := m.ctrl.Call(m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset
func (mr *MockStreamMockRecorder) Reset() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockStream)(nil).Reset))
}

// Walk mocks base method
func (m *MockStream) Walk(arg0 func(queue.Segment) error) error {
	ret := m.ctrl.Call(m, "Walk", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Walk indicates an expected call of Walk
func (mr *MockStreamMockRecorder) Walk(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Walk", reflect.TypeOf((*MockStream)(nil).Walk), arg0)
}
